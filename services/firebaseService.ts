//
// üî¥üî¥üî¥ ‡§ú‡§∞‡•Ç‡§∞‡•Ä: Firebase ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§Ö‡§¨ ‡§á‡§∏ ‡§´‡§º‡§æ‡§á‡§≤ ‡§Æ‡•á‡§Ç ‡§π‡•à! üî¥üî¥üî¥
//
// ‡§Ü‡§™‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä ‡§Ö‡§∏‡§≤‡•Ä Firebase ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§ï‡•ã ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§∏‡•à‡§Ç‡§™‡§≤ ‡§∏‡•á ‡§¨‡§¶‡§≤‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
// ‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ê‡§∏‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü Firebase ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§™‡§æ‡§è‡§ó‡•Ä ‡§î‡§∞ ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡•á‡§ó‡•Ä‡•§
//
// ‡§Ö‡§™‡§®‡•Ä ‡§Ö‡§∏‡§≤‡•Ä ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§ï‡•à‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç:
// 1. ‡§Ö‡§™‡§®‡•á Firebase ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡§Ç‡§∏‡•ã‡§≤ ‡§™‡§∞ ‡§ú‡§æ‡§è‡§Å (console.firebase.google.com)
// 2. ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ (‚öôÔ∏è ‡§Ü‡§á‡§ï‡§®) > ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø (General) ‡§ü‡•à‡§¨ ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§
// 3. ‡§®‡•Ä‡§ö‡•á "Your apps" ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç, ‡§Ö‡§™‡§®‡•Ä ‡§µ‡•á‡§¨ ‡§ê‡§™ ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§
// 4. "SDK setup and configuration" ‡§ï‡•á ‡§§‡§π‡§§, "Config" ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§®‡•á‡§Ç‡•§
// 5. ‡§µ‡§π‡§æ‡§Ç ‡§¶‡§ø‡§è ‡§ó‡§è `firebaseConfig` ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡•ã ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§∏‡•à‡§Ç‡§™‡§≤ ‡§ï‡•ã ‡§â‡§∏‡§∏‡•á ‡§¨‡§¶‡§≤‡•á‡§Ç‡•§
//
export const firebaseConfig = {
  // --- ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§∏‡§≠‡•Ä ‡§Æ‡§æ‡§®‡•ã‡§Ç ‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä Firebase ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó ‡§∏‡•á ‡§¨‡§¶‡§≤‡•á‡§Ç ---
  apiKey: "AIzaSyXXXXXXXXXXXXXXXXXXXXXXXXXXX", // <--- ‡§Ö‡§™‡§®‡•Ä API ‡§ï‡•Ä ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  authDomain: "your-project-id.firebaseapp.com", // <--- ‡§Ö‡§™‡§®‡§æ Auth ‡§°‡•ã‡§Æ‡•á‡§® ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  projectId: "your-project-id", // <--- ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü ID ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  storageBucket: "your-project-id.appspot.com", // <--- ‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§ú ‡§¨‡§ï‡•á‡§ü ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  messagingSenderId: "1234567890", // <--- ‡§Ö‡§™‡§®‡§æ ‡§∏‡•á‡§Ç‡§°‡§∞ ID ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
  appId: "1:1234567890:web:abcdef1234567890" // <--- ‡§Ö‡§™‡§®‡§æ ‡§ê‡§™ ID ‡§Ø‡§π‡§æ‡§Ç ‡§™‡•á‡§∏‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
};

import type { BlogPost, Category } from '../types';

let initializationPromise: Promise<void> | null = null;
let auth: any;
let db: any;

export const isFirebaseConfigured = (): boolean => {
  return firebaseConfig && firebaseConfig.apiKey !== "AIzaSyXXXXXXXXXXXXXXXXXXXXXXXXXXX";
};

export const initializeFirebase = (): Promise<void> => {
    if (initializationPromise) {
        return initializationPromise;
    }

    initializationPromise = new Promise(async (resolve, reject) => {
        if (!isFirebaseConfigured()) {
            return reject(new Error('Firebase not configured'));
        }
        
        const firebase = (window as any).firebase;
        if (!firebase) {
             return reject(new Error("Firebase SDK not loaded."));
        }

        try {
            const app = firebase.apps.length ? firebase.app() : firebase.initializeApp(firebaseConfig);
            auth = firebase.auth();
            db = firebase.firestore();
            resolve();
        } catch (error) {
            console.error("Firebase initialization failed:", error);
            reject(error);
        }
    });

    return initializationPromise;
};

export const onAuthStateChanged = async (callback: (user: any) => void): Promise<() => void> => {
    await initializeFirebase();
    return auth.onAuthStateChanged(callback);
};

export const signInWithEmailAndPassword = async (email: string, password: string): Promise<any> => {
    await initializeFirebase();
    return auth.signInWithEmailAndPassword(email, password);
};

export const signOut = async (): Promise<void> => {
    await initializeFirebase();
    return auth.signOut();
};

export const getPosts = async (): Promise<BlogPost[]> => {
    await initializeFirebase();
    try {
        const snapshot = await db.collection('posts').orderBy('date', 'desc').get();
        return snapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() } as BlogPost));
    } catch (error) {
        console.error("Error getting posts: ", error);
        return [];
    }
};

export const getCategories = async (): Promise<Category[]> => {
    await initializeFirebase();
     try {
        const snapshot = await db.collection('categories').orderBy('name', 'asc').get();
        return snapshot.docs.map((doc: any) => ({ id: doc.id, ...doc.data() } as Category));
    } catch (error) {
        console.error("Error getting categories: ", error);
        return [];
    }
};

export const addPost = async (post: Omit<BlogPost, 'id'>): Promise<string> => {
    await initializeFirebase();
    const docRef = await db.collection('posts').add(post);
    return docRef.id;
};

export const deletePost = async (postId: string): Promise<void> => {
    await initializeFirebase();
    await db.collection('posts').doc(postId).delete();
};

export const addCategory = async (category: Omit<Category, 'id'>): Promise<string> => {
    await initializeFirebase();
    const docRef = await db.collection('categories').add(category);
    return docRef.id;
};

export const seedDefaultCategories = async (): Promise<void> => {
    await initializeFirebase();
    const defaultCategories = [
        { name: '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ' }, { name: '‡§ú‡•â‡§¨' }, { name: '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ' }, 
        { name: '‡§ü‡•á‡§ï' }, { name: '‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞' }, { name: '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø' }, 
        { name: '‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§®' }, { name: '‡§ñ‡•á‡§≤' }, { name: '‡§™‡§∞‡•ç‡§Ø‡§ü‡§®' }, { name: '‡§á‡§§‡§ø‡§π‡§æ‡§∏' },
    ];
    
    const batch = db.batch();
    defaultCategories.forEach(cat => {
        const docRef = db.collection('categories').doc();
        batch.set(docRef, cat);
    });
    
    await batch.commit();
};
