
import React, { useState, useEffect } from 'react';
import { HashRouter, Routes, Route, Navigate, Outlet } from 'react-router-dom';
import Header from './components/Header';
import Footer from './components/Footer';
import Spinner from './components/Spinner';
import HomePage from './pages/HomePage';
import PostPage from './pages/PostPage';
import AdminLoginPage from './pages/AdminLoginPage';
import AdminDashboardPage from './pages/AdminDashboardPage';
import AdminCreatePostPage from './pages/AdminCreatePostPage';
import type { BlogPost, Category } from './types';
import { 
    isFirebaseConfigured,
    initializeFirebase,
    onAuthStateChanged,
    signOut,
    getPosts,
    getCategories,
    addPost as fbAddPost,
    deletePost as fbDeletePost,
    addCategory as fbAddCategory,
    seedDefaultCategories,
} from './services/firebaseService';

// A component to show when the firebase config is missing.
const FirebaseConfigErrorScreen: React.FC = () => (
    <div className="flex items-center justify-center min-h-screen bg-gray-100 p-4">
        <div className="max-w-3xl bg-white p-8 rounded-xl shadow-2xl border-t-4 border-red-500">
            <h1 className="text-3xl font-bold text-red-600 mb-4">ЁЯФ┤ рд╡реЗрдмрд╕рд╛рдЗрдЯ рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рдЖрд╡рд╢реНрдпрдХ рд╣реИ!</h1>
            <p className="text-lg text-gray-700 mb-6">
                рдирдорд╕реНрддреЗ! рдЖрдкрдХреА рд╡реЗрдмрд╕рд╛рдЗрдЯ рд▓рдЧрднрдЧ рддреИрдпрд╛рд░ рд╣реИ, рд▓реЗрдХрд┐рди рдпрд╣ рдЕрднреА рдЦрд╛рд▓реА рджрд┐рдЦ рд░рд╣реА рд╣реИ рдХреНрдпреЛрдВрдХрд┐ рдпрд╣ рдЕрдкрдиреЗ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдирд╣реАрдВ рд╣реЛ рдкрд╛ рд░рд╣реА рд╣реИред рдЗрд╕ рд╕рдорд╕реНрдпрд╛ рдХреЛ рдареАрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕реНрдЯреЗрдкреНрд╕ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВред
            </p>
            <div className="space-y-4 text-gray-800">
                <p>
                    <strong className="text-blue-600">рд╕рдорд╕реНрдпрд╛ рдХреНрдпрд╛ рд╣реИ?</strong> рдлрд╝рд╛рдЗрд▓ <code className="bg-gray-200 text-red-700 px-2 py-1 rounded">src/firebaseConfig.ts</code> рдореЗрдВ рдЖрдкрдХреЗ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рдХрдиреЗрдХреНрдЯ рд╣реЛрдиреЗ рдХреЗ рд▓рд┐рдП рд╕реИрдВрдкрд▓ (рдирдХрд▓реА) рдЬрд╛рдирдХрд╛рд░реА рд╣реИред рдЖрдкрдХреЛ рдЗрд╕реЗ рдЕрдкрдиреА рдЕрд╕рд▓реА рдЬрд╛рдирдХрд╛рд░реА рд╕реЗ рдмрджрд▓рдирд╛ рд╣реЛрдЧрд╛ред
                </p>
                <div>
                    <h2 className="text-xl font-semibold mb-2">рд╕рдорд╛рдзрд╛рди рдХреЗ рд▓рд┐рдП рд╕реНрдЯреЗрдкреНрд╕:</h2>
                    <ol className="list-decimal list-inside space-y-3 pl-2">
                        <li>рдЕрдкрдиреЗ Firebase рдХрдВрд╕реЛрд▓ рдкрд░ рдЬрд╛рдПрдБ: <a href="https://console.firebase.google.com/" target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">console.firebase.google.com</a></li>
                        <li>рдЕрдкрдиреЗ <strong>InfoBharatKa</strong> рдкреНрд░реЛрдЬреЗрдХреНрдЯ рдХреЛ рдЪреБрдиреЗрдВред</li>
                        <li>рдмрд╛рдПрдБ рдХреЛрдиреЗ рдореЗрдВ рдкреНрд░реЛрдЬреЗрдХреНрдЯ рд╕реЗрдЯрд┐рдВрдЧреНрд╕ (тЪЩя╕П рдЖрдЗрдХрди) рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ, рдлрд┐рд░ <strong>Project settings</strong> рдЪреБрдиреЗрдВред</li>
                        <li><strong>General</strong> рдЯреИрдм рдореЗрдВ, рдиреАрдЪреЗ рд╕реНрдХреНрд░реЙрд▓ рдХрд░рдХреЗ "Your apps" рд╕реЗрдХреНрд╢рди рдкрд░ рдЬрд╛рдПрдБ рдФрд░ рдЕрдкрдиреА рд╡реЗрдм рдРрдк (<code>&lt;/&gt;</code>) рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред</li>
                        <li>"SDK setup and configuration" рдХреЗ рддрд╣рдд, <strong>Config</strong> рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВред</li>
                        <li>рдЖрдкрдХреЛ <code className="bg-gray-200 px-1 rounded">const firebaseConfig = &#123;...&#125;;</code> рдЬреИрд╕рд╛ рдПрдХ рдХреЛрдб рдмреНрд▓реЙрдХ рджрд┐рдЦреЗрдЧрд╛ред рдЙрд╕ рдкреВрд░реЗ рдСрдмреНрдЬреЗрдХреНрдЯ рдХреЛ рдХреЙрдкреА рдХрд░реЗрдВред</li>
                        <li>рдЕрдкрдиреЗ рдХреЛрдб рдПрдбрд┐рдЯрд░ рдореЗрдВ <code className="bg-gray-200 text-red-700 px-2 py-1 rounded">src/firebaseConfig.ts</code> рдлрд╝рд╛рдЗрд▓ рдЦреЛрд▓реЗрдВ рдФрд░ рд╡рд╣рд╛рдВ рдореМрдЬреВрдж рд╕реИрдВрдкрд▓ рдХреЛрдб рдХреЛ рдЕрдкрдиреА рдХреЙрдкреА рдХреА рдЧрдИ рдЕрд╕рд▓реА рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕реЗ рдмрджрд▓ рджреЗрдВред</li>
                        <li>рдлрд╝рд╛рдЗрд▓ рдХреЛ рд╕реЗрд╡ рдХрд░реЗрдВред рдЖрдкрдХреА рд╡реЗрдмрд╕рд╛рдЗрдЯ рдЕрдкрдиреЗ рдЖрдк рд░реАрд▓реЛрдб рд╣реЛ рдЬрд╛рдПрдЧреА рдФрд░ рд╕рд╣реА рд╕реЗ рдХрд╛рдо рдХрд░рдиреЗ рд▓рдЧреЗрдЧреА!</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
);

// A component for generic startup errors.
const StartupErrorScreen: React.FC<{ error: string }> = ({ error }) => (
     <div className="flex items-center justify-center min-h-screen bg-red-50 p-4">
        <div className="max-w-xl bg-white p-8 rounded-xl shadow-lg border-t-4 border-red-500">
            <h1 className="text-2xl font-bold text-red-700 mb-2">рдПрдкреНрд▓рд┐рдХреЗрд╢рди рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ рд░рд╣рд╛</h1>
            <p className="text-gray-600">рдПрдХ рдЕрдкреНрд░рддреНрдпрд╛рд╢рд┐рдд рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреЗрдЬ рдХреЛ рд░реАрдлрд╝реНрд░реЗрд╢ рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред</p>
            <pre className="text-xs bg-gray-100 p-2 mt-4 rounded text-red-800 overflow-x-auto">{error}</pre>
        </div>
    </div>
);

const ProtectedRoute: React.FC<{ isLoggedIn: boolean | null }> = ({ isLoggedIn }) => {
    if (isLoggedIn === null) {
        // If auth state is not yet determined, don't render anything or show a spinner
        return null;
    }
    if (!isLoggedIn) {
        return <Navigate to="/login" replace />;
    }
    return <Outlet />;
};

type InitStatus = 'configuring' | 'initializing' | 'loading' | 'ready' | 'error';

const App: React.FC = () => {
    const [posts, setPosts] = useState<BlogPost[]>([]);
    const [categories, setCategories] = useState<Category[]>([]);
    const [isLoggedIn, setIsLoggedIn] = useState<boolean | null>(null); // null means we don't know yet
    const [initStatus, setInitStatus] = useState<InitStatus>('configuring');
    const [initError, setInitError] = useState<string | null>(null);

    useEffect(() => {
        let authUnsubscribe: (() => void) | null = null;
        
        const startApp = async () => {
            try {
                // Step 1: Check Config
                if (!isFirebaseConfigured()) {
                    throw new Error('CONFIG_MISSING');
                }

                // Step 2: Initialize Firebase
                setInitStatus('initializing');
                await initializeFirebase();
                
                // Step 3: Start loading data and listening for auth changes concurrently
                setInitStatus('loading');
                const authPromise = new Promise<void>((resolve) => {
                    onAuthStateChanged(user => {
                        setIsLoggedIn(!!user);
                        resolve(); // First auth check is complete
                    }).then(unsub => {
                        authUnsubscribe = unsub;
                    });
                });

                const dataPromise = (async () => {
                    const [posts, fetchedCategories] = await Promise.all([getPosts(), getCategories()]);
                    let finalCategories = fetchedCategories;
                    if (fetchedCategories.length === 0) {
                        await seedDefaultCategories();
                        finalCategories = await getCategories();
                    }
                    setPosts(posts);
                    setCategories(finalCategories);
                })();

                await Promise.all([authPromise, dataPromise]);

                // Step 4: App is ready
                setInitStatus('ready');

            } catch (error: any) {
                console.error("Application initialization failed:", error);
                setInitError(error.message);
                setInitStatus('error');
            }
        };

        startApp();

        return () => {
            if (authUnsubscribe) {
                authUnsubscribe();
            }
        };
    }, []);

    const addPost = async (post: Omit<BlogPost, 'id'>): Promise<void> => {
        const newPostId = await fbAddPost(post);
        const newPostWithId = { ...post, id: newPostId };
        setPosts(prevPosts => [newPostWithId, ...prevPosts].sort((a,b) => new Date(b.date).getTime() - new Date(a.date).getTime()));
    };
    
    const deletePost = async (postId: string): Promise<void> => {
        await fbDeletePost(postId);
        setPosts(prevPosts => prevPosts.filter(p => p.id !== postId));
    };

    const addCategory = async (categoryName: string): Promise<void> => {
        if (categories.some(c => c.name.toLowerCase() === categoryName.toLowerCase())) {
            alert("рдпрд╣ рд╢реНрд░реЗрдгреА рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИред");
            throw new Error("Category exists");
        }
        const newCategoryData = { name: categoryName };
        const createdId = await fbAddCategory(newCategoryData);
        setCategories(prev => [...prev, { id: createdId, name: categoryName }].sort((a, b) => a.name.localeCompare(b.name, 'hi')));
    };

    const handleLogout = async () => {
        try {
            await signOut();
        } catch (error) {
            console.error("Error signing out:", error);
        }
    };
    
    if (initStatus === 'error') {
        return initError === 'CONFIG_MISSING' ? <FirebaseConfigErrorScreen /> : <StartupErrorScreen error={initError!} />;
    }

    if (initStatus !== 'ready') {
        let message = 'рдПрдкреНрд▓рд┐рдХреЗрд╢рди рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...';
        if (initStatus === 'initializing') message = 'Firebase рд╕реЗ рдХрдиреЗрдХреНрдЯ рд╣реЛ рд░рд╣рд╛ рд╣реИ...';
        if (initStatus === 'loading') message = 'рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...';
        
        return (
            <div className="flex flex-col min-h-screen bg-gray-50 justify-center items-center">
                <Spinner size="h-16 w-16" />
                <p className="mt-4 text-gray-600">{message}</p>
            </div>
        );
    }

    return (
        <HashRouter>
            <div className="flex flex-col min-h-screen bg-gray-50">
                <Header isLoggedIn={isLoggedIn === true} onLogout={handleLogout} categories={categories} />
                <main className="flex-grow">
                    <Routes>
                        <Route path="/" element={<HomePage posts={posts} categories={categories} />} />
                        <Route path="/post/:id" element={<PostPage posts={posts} categories={categories} />} />
                        <Route path="/login" element={isLoggedIn ? <Navigate to="/admin" /> : <AdminLoginPage />} />

                        <Route element={<ProtectedRoute isLoggedIn={isLoggedIn} />}>
                            <Route path="/admin" element={<AdminDashboardPage posts={posts} categories={categories} addCategory={addCategory} deletePost={deletePost} />} />
                            <Route path="/admin/create" element={<AdminCreatePostPage addPost={addPost} categories={categories} />} />
                        </Route>

                        <Route path="*" element={<Navigate to="/" />} />
                    </Routes>
                </main>
                <Footer />
            </div>
        </HashRouter>
    );
};

export default App;
